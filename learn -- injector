$injector
对应文件：src/auto/injector.js

创建injector的工厂函数
 function createInternalInjector(cache, factory) {...}

 injector 的对象
 return {
   invoke: invoke,
   instantiate: instantiate,
   get: getService,
   annotate: annotate,
   has: function(name) {
     return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
   }
 };

function createInjector(modulesToLoad) {
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap(),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function() {
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
          })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
          createInternalInjector(instanceCache, function(servicename) {
            var provider = providerInjector.get(servicename + providerSuffix);
            return instanceInjector.invoke(provider.$get, provider);
          }));


  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

  return instanceInjector;
}

这里提供一个provider_, 如果它是一个函数或者数组，那么将调用providerInjector.instantiate实例化一个对象出来并缓存到providerCache中
实例对象需要有$get属性，原因在于使用该provider创建一个服务实例时return instanceInjector.invoke(provider.$get, provider);
  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  instanceInjector = (instanceCache.$injector =
            createInternalInjector(instanceCache, function(servicename) {
              var provider = providerInjector.get(servicename + providerSuffix);
              return instanceInjector.invoke(provider.$get, provider);
            }));

创建实例的方法 return fn()或者return fn.apply(self, args)
function invoke(fn, self, locals){
        .....
        // Performance optimization: http://jsperf.com/apply-vs-call-vs-invoke
        switch (self ? -1 : args.length) {
          case  0: return fn();
          case  1: return fn(args[0]);
          case  2: return fn(args[0], args[1]);
          case  3: return fn(args[0], args[1], args[2]);
          case  4: return fn(args[0], args[1], args[2], args[3]);
          case  5: return fn(args[0], args[1], args[2], args[3], args[4]);
          case  6: return fn(args[0], args[1], args[2], args[3], args[4], args[5]);
          case  7: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          case  8: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
          case  9: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
            args[8]);
          case 10: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
            args[8], args[9]);
          default: return fn.apply(self, args);
        }
}

factory函数，它是provider的一种简写形式, 用来创建实例方法
function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }

service函数，它也是provider的一种简写形式，但它是使用constructor来构造实例
function service(name, constructor) {
   return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
   }]);
}

value函数，它也是provider的一种简写形式，它直接返回其中的val值作为服务.
function value(name, val) { return factory(name, valueFn(val)); }
function valueFn(value) {return function() {return value;};}


如何获取injector
1 通过元素获取injector
Sometimes you want to get access to the injector of a currently running Angular app from outside Angular. Perhaps, you want to inject and compile some markup after the application has been bootstrapped. You can do this using extra injector() added to JQuery/jqLite elements. See angular.element.
This is fairly rare but could be the case if a third party library is injecting the markup.
In the following example a new block of HTML containing a ng-controller directive is added to the end of the document body by JQuery. We then compile and link it into the current AngularJS scope.

var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
$(document.body).append($div);

angular.element(document).injector().invoke(function($compile) {
  var scope = angular.element($div).scope();
  $compile($div)(scope);
});

2  通过angular.injector(["ng"])
var $injector = angular.injector(['ng']);

// use the injector to kick off your application
// use the type inference to auto inject arguments, or use implicit injection
$injector.invoke(function($rootScope, $compile, $document){
  $compile($document)($rootScope);
  $rootScope.$digest();
});