

//这里提供一个provider_, 如果它是一个函数或者数组，那么将调用providerInjector.instantiate实例化一个对象出来并缓存到providerCache中
//实例对象需要有$get属性，原因在于使用该provider创建一个服务实例时return instanceInjector.invoke(provider.$get, provider);
  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  instanceInjector = (instanceCache.$injector =
            createInternalInjector(instanceCache, function(servicename) {
              var provider = providerInjector.get(servicename + providerSuffix);
              return instanceInjector.invoke(provider.$get, provider);
            }));

//创建实例的方法 return fn()或者return fn.apply(self, args)
function invoke(fn, self, locals){
        .....
        // Performance optimization: http://jsperf.com/apply-vs-call-vs-invoke
        switch (self ? -1 : args.length) {
          case  0: return fn();
          case  1: return fn(args[0]);
          case  2: return fn(args[0], args[1]);
          case  3: return fn(args[0], args[1], args[2]);
          case  4: return fn(args[0], args[1], args[2], args[3]);
          case  5: return fn(args[0], args[1], args[2], args[3], args[4]);
          case  6: return fn(args[0], args[1], args[2], args[3], args[4], args[5]);
          case  7: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          case  8: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
          case  9: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
            args[8]);
          case 10: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
            args[8], args[9]);
          default: return fn.apply(self, args);
        }
}